{"version":3,"file":"static/js/439.73aa78a5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/ContactEditor.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { contactsList } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteItem = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n  const contacts = getFilterContacts();\n\n  //for contacts table\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: '#ada9a97a',\n      color: theme.palette.common.black,\n      fontWeight: 700,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(even)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0,\n    },\n  }));\n\n  return contacts.length === 0 ? (\n    <Alert severity=\"warning\" variant=\"outlined\">\n      There is not any contacts.\n    </Alert>\n  ) : (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Name</StyledTableCell>\n            <StyledTableCell align=\"left\">Number</StyledTableCell>\n            <StyledTableCell align=\"right\">Delete</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {contacts.map(({ name, number, id }) => (\n            <StyledTableRow key={id}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {name}\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">{number}</StyledTableCell>\n              <StyledTableCell align=\"right\">\n                <IconButton\n                  aria-label=\"delete\"\n                  type=\"button\"\n                  onClick={() => deleteItem(id)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: row;\n`;\nexport const LabelName = styled.label`\n  text-align: left;\n  margin-bottom: 20px;\n  margin-left: 5px;\n`;\nexport const Input = styled(Field)`\n  padding: 3px;\n  display: block;\n  width: 300px;\n  text-align: left;\n  margin: 0;\n`;\nexport const Error = styled(ErrorMessage)`\n  margin-top: -30px;\n  margin-left: 320px;\n  width: 300px;\n\n  text-align: left;\n  font-size: 16px;\n  color: red;\n`;\nexport const AddButton = styled(Button)`\n  border-color: black;\n  background: ada9a97a;\n  color: black;\n  padding: 14px 14px;\n  margin-left: 5px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-mui';\n\nimport {\n  LabelName,\n  AddButton,\n} from 'components/ContactForm/ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { contactsList } = useSelector(selectContacts);\n\n  const handleInput = (values, { resetForm }) => {\n    const dublicateContact = findDublicate(values, contactsList);\n    dublicateContact\n      ? alert(`${values.name} or ${values.number} is already in contacts`)\n      : dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  const findDublicate = (contact, contactsList) => {\n    return contactsList.find(\n      item =>\n        item.name.toLowerCase() === contact.name.toLowerCase() ||\n        item.number === contact.number\n    );\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={values => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Required';\n        } else if (!values.number) {\n          errors.number = 'Required';\n        } else if (\n          !/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){3,14}(\\s*)?$/i.test(\n            values.number\n          )\n        ) {\n          errors.number = 'Invalid - only digits, at least 3';\n        }\n        return errors;\n      }}\n      onSubmit={handleInput}\n    >\n      <Form autoComplete=\"on\">\n        <LabelName htmlFor=\"name\">\n          <Field\n            component={TextField}\n            type=\"text\"\n            name=\"name\"\n            label=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Enter name\"\n          />\n        </LabelName>\n        <LabelName htmlFor=\"number\">\n          <Field\n            component={TextField}\n            type=\"tel\"\n            name=\"number\"\n            label=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Enter number\"\n          />\n        </LabelName>\n        <AddButton variant=\"outlined\" type=\"submit\">\n          Add\n        </AddButton>\n      </Form>\n    </Formik>\n  );\n\n  // return (\n  //   <Formik initialValues={initialValues} onSubmit={handleInput}>\n  //     <FormContact autoComplete=\"on\">\n  //       <LabelName htmlFor=\"name\">\n  //         Name\n  //         <Input\n  //           type=\"text\"\n  //           name=\"name\"\n  //           // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  //           // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  //           placeholder=\"Enter name\"\n  //         />\n  //       </LabelName>\n  //       <LabelName htmlFor=\"number\">\n  //         Number\n  //         <Input\n  //           type=\"tel\"\n  //           name=\"number\"\n  //           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  //           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  //           placeholder=\"Enter number\"\n  //         />\n  //       </LabelName>\n  //       <Button type=\"submit\">Add contact</Button>\n  //     </FormContact>\n  //   </Formik>\n  // );\n};\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport TextField from '@mui/material/TextField';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const { filter } = useSelector(selectFilter);\n\n  const changeFilter = event => {\n    dispatch(updFilter(event.currentTarget.value));\n  };\n\n  return (\n    <TextField\n      sx={{ marginRight: 5 }}\n      type=\"text\"\n      name=\"filter\"\n      label=\"Search in contacts\"\n      placeholder=\"Search in contacts\"\n      value={filter}\n      onChange={changeFilter}\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 12px;\n`;\nexport const Input = styled.input`\n  padding: 8px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n`;\nexport const Button = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: #fff;\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nexport const Div = styled.div``;\n\nexport const Header = styled.p`\n  display: flex;\n  font-size: 14px;\n  text-transform: uppercase;\n  justify-content: center;\n  margin: 0;\n`;\n\nexport const PContact = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n`;\nexport const Section = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  font-size: 20px;\n  padding: 10px;\n  margin-bottom: 20px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { Div, Header, Section } from './ContactEditor.styled';\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Div>\n      <Header>add new contact:</Header>\n      <Section>\n        <Filter />\n        <ContactForm />\n        {isLoading && !error && <Loader />}\n      </Section>\n    </Div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactEditor />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","ContactList","dispatch","useDispatch","contactsList","useSelector","normalizedFilter","toLowerCase","contact","name","includes","getFilterContacts","StyledTableCell","styled","TableCell","theme","tableCellClasses","backgroundColor","color","palette","common","black","fontWeight","fontSize","StyledTableRow","TableRow","action","hover","border","length","Alert","severity","variant","TableContainer","component","Paper","Table","sx","minWidth","TableHead","align","TableBody","map","number","id","scope","IconButton","type","onClick","contactId","deleteContact","Delete","LabelName","Form","AddButton","Field","ErrorMessage","Button","ContactForm","findDublicate","find","item","initialValues","validate","values","errors","test","onSubmit","resetForm","alert","addContact","autoComplete","htmlFor","TextField","label","pattern","title","placeholder","Filter","marginRight","value","onChange","event","updFilter","currentTarget","Div","Header","Section","ContactEditor","useEffect","fetchContacts","Loader","Contacts","Helmet"],"sourceRoot":""}